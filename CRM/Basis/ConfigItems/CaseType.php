<?php
/**
 * Class for CaseType configuration
 *
 * @author Erik Hommel (CiviCooP) <erik.hommel@civicoop.org>
 * @date 3 Feb 2016
 * @license AGPL-3.0
 */
class CRM_Basis_ConfigItems_CaseType {

  private $_updateFields = array();
  private $_updateParams = array();
  private $_updateIndex = NULL;

    /**
     * Method to validate params for create
     *
     * @param $params
     * @throws Exception when missing mandatory params
     */
    protected function validateCreateParams($params) {
        if (!isset($params['name']) || empty($params['name'])) {
            throw new Exception('Missing mandatory param name in '.__METHOD__);
        }
    }

    /**
     * Method to create case type
     * note: initially tried with API but no luck even though CiviCRM transaction seems to be committed? So after
     * investing 4 hours of analysis and trying now decided to move directly into database, but with XML
     * generated by case function so future changes are reflected.
     *
     * @param array $params
     * @return mixed
     * @throws Exception when error from API CaseType Create
     */
    public function create($params) {
        $this->validateCreateParams($params);
        $existing = $this->getWithName($params['name']);
        if (!isset($existing['id'])) {
          if (!isset($params['title']) || empty($params['title'])) {
            $params['title'] = CRM_Basis_Utils::buildLabelFromName($params['name']);
          }
          $params['is_active'] = 1;
          $definition = CRM_Case_BAO_CaseType::convertDefinitionToXML($params['name'], $params['definition']);
          $insert = "INSERT INTO civicrm_case_type (name, title, is_active, weight, definition) VALUES(%1, %2, %3, %4, %5)";
          $insertParams = array(
            1 => array($params['name'], 'String'),
            2 => array($params['title'], 'String'),
            3 => array($params['is_active'], 'Integer'),
            4 => array($params['weight'], 'Integer'),
            5 => array($definition, 'String'),
          );
          CRM_Core_DAO::executeQuery($insert, $insertParams);
        } else {
          $this->_updateIndex = 0;
          $this->_updateParams = array();
          $this->_updateFields = array();
          $this->setUpdateFieldsAndParams($params);
          if (!empty($this->_updateFields)) {
            $this->_updateIndex++;
            $update = "UPDATE civicrm_case_type SET ".implode(', ', $this->_updateFields).' WHERE id = %'.$this->_updateIndex;
            $this->_updateParams[$this->_updateIndex] = array($existing['id'], 'Integer');
            CRM_Core_DAO::executeQuery($update, $this->_updateParams);
          }
        }
    }

  /**
   * Method to build the fields and params for a correct update query
   *
   * @param $params
   */
    private function setUpdateFieldsAndParams($params) {
      if (isset($params['title'])) {
        $this->_updateIndex++;
        $this->_updateFields[] = 'title = %'.$this->_updateIndex;
        $this->_updateParams[$this->_updateIndex] = array($params['title'], 'String');
      }
      if (isset($params['description'])) {
        $this->_updateIndex++;
        $this->_updateFields[] = 'description = %'.$this->_updateIndex;
        $this->_updateParams[$this->_updateIndex] = array($params['description'], 'String');
      }
      if (isset($params['definition'])) {
        $definition = CRM_Case_BAO_CaseType::convertDefinitionToXML($params['name'], $params['definition']);
        $this->_updateIndex++;
        $this->_updateFields[] = 'definition = %'.$this->_updateIndex;
        $this->_updateParams[$this->_updateIndex] = array($definition, 'String');
      }
      if (isset($params['is_reserved'])) {
        $this->_updateIndex++;
        $this->_updateFields[] = 'is_reserved = %'.$this->_updateIndex;
        $this->_updateParams[$this->_updateIndex] = array($params['is_reserved'], 'Integer');
      }
      if (isset($params['is_active'])) {
        $this->_updateIndex++;
        $this->_updateFields[] = 'is_active = %'.$this->_updateIndex;
        $this->_updateParams[$this->_updateIndex] = array($params['is_active'], 'Integer');
      }
      if (isset($params['weight'])) {
        $this->_updateIndex++;
        $this->_updateFields[] = 'weight = %'.$this->_updateIndex;
        $this->_updateParams[$this->_updateIndex] = array($params['weight'], 'Integer');
      }

      return;
    }


    /**
     * Method to get case sub type with name
     *
     * @param string $caseTypeName
     * @return array|bool
     * @access public
     * @static
     */
    public function getWithName($caseTypeName) {
        try {
            return civicrm_api3('CaseType', 'Getsingle', array('name' => $caseTypeName));
        } catch (CiviCRM_API3_Exception $ex) {
            return FALSE;
        }
    }


    /**
     * Method to uninstall case type
     *
     * @param $caseTypeName
     */
    public function uninstallCaseType($caseTypeName) {
        if (!empty($caseTypeName)) {
            // catch any errors and ignore (disabling can be done manually if problems)
            try {
                // get case type with name
                $caseTypeId = civicrm_api3('CaseType', 'getvalue', array('name' => $caseTypeName, 'return' => 'id'));
                civicrm_api3('CaseType', 'delete', array('id' => $caseTypeId,));
            } catch (CiviCRM_API3_Exception $ex) {
            }
        }
    }
}